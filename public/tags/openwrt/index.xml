<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OpenWrt on Pseudowang</title>
    <link>http://localhost:1313/tags/openwrt/</link>
    <description>Recent content in OpenWrt on Pseudowang</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 Jul 2024 18:28:24 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/openwrt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>从官方固件到Docker镜像：ImmortalWrt构建与运行之旅</title>
      <link>http://localhost:1313/posts/the-journey-of-building-and-running-immortalwrt/</link>
      <pubDate>Fri, 19 Jul 2024 18:28:24 +0800</pubDate>
      <guid>http://localhost:1313/posts/the-journey-of-building-and-running-immortalwrt/</guid>
      <description>自从上次因为不小心(手贱)将自己小服务器分区给整坏了，导致开不了机，重新搭建了OpenWrt，不到1个月的时间，这次觉得上次使用的镜像太久没有更新了，然后加上是别人编译的镜像，这次想着自己来做一次镜像，并且学习一下，也碰到了很多自己没有遇到过的报错，也在一次又一次的报错中学习到了很多东西，如果有写错的地方，欢迎评论提出或者邮件，谢谢！&#xA;使用官方固件 这里以x86-64平台为例&#xA;首先获取固件的下载地址&#xA;打开ImmortalWrt的官网， 选择当前最新的稳定版本23.05.3(笔记后面用的是23.05.2，因为写笔记的时候 23.05.3 刚刚更新，有些导航页还没完成) 选择x86平台&#xA;选择64位 选择固件rootfs.tar.gz 鼠标右键点击&amp;quot;复制链接地址&amp;quot;获取到固件的下载地址，后面第6步需要用到 开始构建镜像&#xA;git clone https://github.com/crazygit/openwrt-x86-64.git openwrt-x86-64 cd openwrt-x86-64 # 参数1: 第5步中获取的固件下载地址 # 参数2: docker镜像的名字，可以随便指定: 如pseudowang/openwrt-x86-64 ./build.sh &amp;#34;https://downloads.immortalwrt.org/releases/23.05.2/targets/x86/64/immortalwrt-23.05.2-x86-64-rootfs.tar.gz&amp;#34; pseudowang/openwrt-x86-64 设置网络 将网卡混杂模式打开 sudo ip link set enp3s0 promisc on 混杂模式（Promiscuous Mode）是一种网络接口卡 (NIC) 操作模式。在这种模式下，网络接口卡会接收它所在网络上的所有数据包，而不仅仅是发送给它的数据包。&#xA;创建 Docker 网卡 docker network create -d macvlan --subnet=192.168.10.0/24 --gateway=192.168.10.1 -o parent=enp3s0 macnet macvlan 是一种网络驱动程序，它允许Docker 容器直接连接到宿主机的物理网络。使用macvlan 时，每个容器将获得一个唯一的 MAC 地址， 并直接出现在物理网络上， 就像它是一个独立的设备&#xA;使用刚刚创建的镜像并启动容器 docker run --restart always --name openwrt -d --network macnet --privileged pseudowang/openwrt-x86-64 设置容器ip 到目前为止， 容器已经启动了，可以通过docker ps -a 查看运行的容器，然后查看OpenWRT 的 container ID</description>
    </item>
    <item>
      <title>Docker搭建OpenWrt</title>
      <link>http://localhost:1313/posts/using-docker-to-set-up-openwrt/</link>
      <pubDate>Sun, 23 Jun 2024 21:27:28 +0800</pubDate>
      <guid>http://localhost:1313/posts/using-docker-to-set-up-openwrt/</guid>
      <description>前言 这周五的时候，因为上周实训完了，学到了很多东西，学到了Gitlab，之前就有想自己搭建一个自己的代码版本管理仓库，正好宿舍有一台小服务器在Docker 中运行着OpenWRT， 一开始一直拉不下来 GitLab 的镜像，好像是因为最近很多国内docker镜像站给关闭了，然后后面通过加速站拉取下拉了，然后发现磁盘空间不够了， 然后自己手贱去调整了分区，然后就再也开不了机了(就是自己对这个方面不了解，然后去乱搞才会导致这件事情的发生)， 不过上次搭建OpenWRT 和 nas-tools 的时候没有写笔记，然后已经忘了差不多了。这次花了很多时间就是因为上次没有写笔记进行总结，才会花费了这么长的时间，所以这次打算把全部过程记录下来，这样给以后自己手贱搞坏服务器的时候可以用(最好还是别发生，真的很累)&#xA;Docker 安装 这个可以直接搜索，因为现在使用的官方安装脚本已经不能用了，不知道到时候再用的时候，我推荐的安装方法会不会也不可以用了，建议要用的时候直接Google，使用国内可以安装的方法&#xA;设置网络 将网卡混杂模式打开 sudo ip link set enp3s0 promisc on 混杂模式（Promiscuous Mode）是一种网络接口卡 (NIC) 操作模式。在这种模式下，网络接口卡会接收它所在网络上的所有数据包，而不仅仅是发送给它的数据包。&#xA;创建 Docker 网卡 docker network create -d macvlan --subnet=192.168.10.0/24 --gateway=192.168.10.1 -o parent=enp3s0 macnet macvlan 是一种网络驱动程序，它允许Docker 容器直接连接到宿主机的物理网络。使用macvlan 时，每个容器将获得一个唯一的 MAC 地址， 并直接出现在物理网络上， 就像它是一个独立的设备&#xA;下载openwrt 镜像并启动容器 GitHub 仓库 这里包含了很全的镜像文件包含了 arm，x86，x64的docker镜像，我的机器是NUC，所以我安装的是x64 的 docker 镜像。可以通过uname -a 查看 拉取镜像docker pull sulinggg/openwrt:x86_64 如果拉取不下来的话，可以使用作者的 阿里云镜像仓库 registry.cn-shanghai.aliyuncs.com/suling/openwrt:x86_64 镜像还是一样的&#xA;启动 OpenWRT 镜像 docker run --restart always --name openwrt -d --network macnet --privileged sulinggg/openwrt:x86_64 /sbin/init 设置容器ip 到目前为止， 容器已经启动了，可以通过docker ps -a 查看运行的容器，然后查看OpenWRT 的 container ID</description>
    </item>
  </channel>
</rss>
